name: ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - run: |
        python -m pip install --upgrade pip
        pip install httpx --upgrade
        pip install -r requirements.txt
        pip install pytest

    - name: Lint with Ruff
      run: |
        ruff check .
        ruff format --check .

    - env:
        NVIDIA_API_KEY: ${{ secrets.NVIDIA_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      run: |
        cd tests/integration
        pytest --cov=ml --cov=cli --cov-report=xml --cov-report=html rate.py validator.py router.py -v

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./tests/integration/coverage.xml
        flags: integration
        name: integration-coverage

  docker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: false
        load: true
        tags: ai-benchmark:test

    - name: Test Docker image
      run: |
        # Create test env file
        echo "NVIDIA_API_KEY=test_key" > .env
        echo "OPENAI_API_KEY=test_key" >> .env
        echo "ANTHROPIC_API_KEY=test_key" >> .env
        echo "GOOGLE_API_KEY=test_key" >> .env

        # Test if container starts (without API calls)
        docker run -d --name test-container -p 8501:8501 --env-file .env ai-benchmark:test
        sleep 10

        # Check if Streamlit is running
        curl -f http://localhost:8501/_stcore/health && echo "Docker container health check passed" || (echo "Docker container health check failed"; docker logs test-container; exit 1)

        # Cleanup
        docker stop test-container
        docker rm test-container

  cli:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test CLI
      run: |
        cd tests/e2e
        python -m pytest --cov=cli --cov-report=xml --cov-report=html cli.py -v

    - name: Upload CLI coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./tests/e2e/coverage.xml
        flags: e2e
        name: e2e-coverage